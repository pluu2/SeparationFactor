# -*- coding: utf-8 -*-
"""SeparationFactor Layer.ipynb

Automatically generated by Colaboratory.

"""
import tensorflow as tf
class SeparationFactor (tf.keras.layers.Layer):
  tf.compat.v1.enable_eager_execution() 
  def __init__(self, separation_factor,supression_factor):
    super(SeparationFactor, self).__init__()
    self.separation_factor = separation_factor
    self.separation_factor = tf.cast(self.separation_factor, tf.float32)
    self.supression_factor = supression_factor
    self.supression_factor = tf.cast(self.supression_factor, tf.float32)

  def call(self, inputs): #the tensors will be 'batchsize, dim size'
        def body(x,tensor): 
          tensor= tf.sparse.add(tensor, tf.sparse.SparseTensor(indices=[[x,index_max[x]]], values=[self.separation_factor], dense_shape=[batch, dim])) 
          return [tf.add(x,1),tensor]
  
        def condition(x,tensor):
          return tf.less(x,batch)
        pi= inputs
        self.pi=pi

        batch = tf.shape(pi)[0]
        dim = tf.shape(pi)[1] 
        index_max = tf.math.argmax(inputs,axis=-1)
        final = inputs
        
        sparse_tensor= tf.sparse.SparseTensor(indices=[[0,index_max[0]]], values=[self.separation_factor], dense_shape=[batch, dim]) 
        ctr= tf.constant(1)
        temp = tf.while_loop(condition,body,[ctr,sparse_tensor])
        sparse_tensor=tf.sparse.to_dense(temp[1],default_value=self.supression_factor)
        boost = pi*sparse_tensor
       
        return boost